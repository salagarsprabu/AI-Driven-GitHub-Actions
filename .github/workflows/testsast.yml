name: üîê Security PR Scan (AI + Regex)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write
  models: read

env:
  GH_MODEL: "gpt-4o-mini"
  MODEL_TEMPERATURE: "0"
  BLOCK_ON_HIGH: "false" # Set to "true" if you want to block merges

jobs:
  security-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ripgrep curl

      - name: Run Regex + AI Security Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "üîç Running security scan on changed files..."

          # --- Get changed files and diff ---
          BASE=${{ github.event.pull_request.base.ref }}
          git fetch origin $BASE:refs/remotes/origin/$BASE
          CHANGED_FILES=$(git diff --name-only origin/$BASE...HEAD)
          DIFF=$(git diff origin/$BASE...HEAD -U0)

          # --- Regex patterns ---
          HIGH_PATTERNS=(
            'AKIA[0-9A-Z]{16}|ASIA[0-9A-Z]{16}'
            '[A-Za-z0-9/+=]{40}'
            '-----BEGIN (RSA|PRIVATE|EC|OPENSSH) PRIVATE KEY-----'
            "(password|passwd)[\"']?\s*[:=]\s*['\"].{3,}"
          )
          LOW_PATTERNS=(
            '\beval\(|\bexec\('
            'api[_-]?key|secret[_-]?key'
          )

          HIGH_FINDINGS=()
          LOW_FINDINGS=()

          # --- Scan changed files ---
          for file in $CHANGED_FILES; do
            [ -f "$file" ] || continue
            case "$file" in *.png|*.jpg|*.jpeg|*.gif|*.pdf|*.zip|*.bin) continue;; esac

            for pat in "${HIGH_PATTERNS[@]}"; do
              matches=$(rg --no-filename -n --pcre2 "$pat" "$file" 2>/dev/null || true)
              while IFS=: read -r line _; do
                [ -n "$line" ] && HIGH_FINDINGS+=("$file:$line ‚Äî $pat")
              done <<< "$matches"
            done

            for pat in "${LOW_PATTERNS[@]}"; do
              matches=$(rg --no-filename -n --pcre2 "$pat" "$file" 2>/dev/null || true)
              while IFS=: read -r line _; do
                [ -n "$line" ] && LOW_FINDINGS+=("$file:$line ‚Äî $pat")
              done <<< "$matches"
            done
          done

          # --- AI-assisted check using GitHub Models REST API ---
          SYSTEM_PROMPT="You are a strict code security reviewer. Analyze the following PR diff for potential security risks like secrets, insecure auth, injections, or unsafe logic. Summarize findings in plain English. If no risk, respond with 'NO_RISK'."
          AI_OUT=$(gh api -X POST /models/${{ env.GH_MODEL }}/responses \
            -f input="$SYSTEM_PROMPT\n\n$DIFF" \
            -f temperature=${{ env.MODEL_TEMPERATURE }} \
            --jq '.output_text' 2>/dev/null || echo "NO_RISK")

          AI_OUT=${AI_OUT:-NO_RISK}

          # --- Build Markdown comment ---
          COMMENT="### üîê Automated Security Scan Results\n\n"

          COMMENT+="**üß† AI Findings:**\n"
          if [[ "$AI_OUT" == "NO_RISK" ]]; then
            COMMENT+="- None detected by AI model.\n\n"
          else
            COMMENT+="\`\`\`\n$AI_OUT\n\`\`\`\n\n"
          fi

          COMMENT+="**üö® Regex High Severity:**\n"
          if [ ${#HIGH_FINDINGS[@]} -eq 0 ]; then
            COMMENT+="- None\n"
          else
            for f in "${HIGH_FINDINGS[@]}"; do COMMENT+="- \`$f\`\n"; done
          fi
          COMMENT+="\n"

          COMMENT+="**‚ö†Ô∏è Regex Low Severity:**\n"
          if [ ${#LOW_FINDINGS[@]} -eq 0 ]; then
            COMMENT+="- None\n"
          else
            for f in "${LOW_FINDINGS[@]}"; do COMMENT+="- \`$f\`\n"; done
          fi
          COMMENT+="\n---\n*Generated by automated SAST + AI review.*"

          # --- Post to PR as comment ---
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT"

          # --- Optional blocking policy ---
          if [ "${{ env.BLOCK_ON_HIGH }}" = "true" ] && [ ${#HIGH_FINDINGS[@]} -gt 0 ]; then
            echo "::error ::Blocking PR due to high-severity findings."
            exit 1
          fi
