# .github/workflows/security-pr-ai-scan-ultra.yml
name: simplified PR Security Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write
  models: read

env:
  BLOCK_ON_HIGH: "true"
  GH_MODEL: "gpt-4o-mini"
  MODEL_TEMPERATURE: "0"

jobs:
  pr-security-scan:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ripgrep jq curl

      - name: Run Regex + AI Security Scan
        shell: bash
        env:
          GH_MODEL: ${{ env.GH_MODEL }}
          MODEL_TEMPERATURE: ${{ env.MODEL_TEMPERATURE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BLOCK_ON_HIGH: ${{ env.BLOCK_ON_HIGH }}
        run: |
          set -uo pipefail

          # --- Get changed files & PR diff ---
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}...HEAD -U0)

          # --- Regex scan ---
          HIGH_PATTERNS=('AKIA[0-9A-Z]{16}|ASIA[0-9A-Z]{16}' '[A-Za-z0-9/+=]{40}' '-----BEGIN (RSA|PRIVATE|EC|OPENSSH) PRIVATE KEY-----' "(password|passwd)[\"']?\s*[:=]\s*['\"].{3,}")
          LOW_PATTERNS=('\beval\(|\bexec\(' 'api[_-]?key|secret[_-]?key')
          REGEX_JSON=$(jq -n '{high:[], low:[]}')
          while IFS= read -r file; do
            [ -f "$file" ] || continue
            case "$file" in *.png|*.jpg|*.jpeg|*.gif|*.pdf|*.zip|*.bin) continue;; esac
            for pat in "${HIGH_PATTERNS[@]}"; do
              rg --no-filename -n --pcre2 "$pat" "$file" 2>/dev/null \
                | while IFS=: read -r line content; do
                    snippet=$(echo "$content" | sed 's/"/\\"/g')
                    REGEX_JSON=$(echo "$REGEX_JSON" | jq --arg f "$file" --arg l "$line" --arg m "$snippet" --arg p "$pat" '.high += [{"file":$f,"line":$l,"snippet":$m,"pattern":$p}]')
                done
            done
            for pat in "${LOW_PATTERNS[@]}"; do
              rg --no-filename -n --pcre2 "$pat" "$file" 2>/dev/null \
                | while IFS=: read -r line content; do
                    snippet=$(echo "$content" | sed 's/"/\\"/g')
                    REGEX_JSON=$(echo "$REGEX_JSON" | jq --arg f "$file" --arg l "$line" --arg m "$snippet" --arg p "$pat" '.low += [{"file":$f,"line":$l,"snippet":$m,"pattern":$p}]')
                done
            done
          done <<< "$CHANGED_FILES"

          # --- AI scan ---
          SYSTEM_PROMPT='You are a strict security reviewer. Analyze the PR diff for risky patterns and output JSON array with severity (HIGH|MEDIUM|LOW), summary, file, line_hint, explain. If no risk, output NO_RISK.'
          INPUT_JSON=$(jq -nc --arg model "$GH_MODEL" --arg temp "$MODEL_TEMPERATURE" --arg sys "$SYSTEM_PROMPT" --arg diff "$DIFF" '{model:$model,temperature:($temp|tonumber),messages:[{role:"system",content:$sys},{role:"user",content:$diff}],max_tokens:1200}')
          AI_OUT=$(gh api graphql -f query='
            mutation($input: CreateChatCompletionInput!) {
              createChatCompletion(input: $input) { message { content } }
            }' -F input="$INPUT_JSON" --jq '.data.createChatCompletion.message.content' 2>/dev/null || echo "NO_RISK")

          # --- Aggregate results ---
          COMMENT="### Security Scan Results\n\n**Regex findings:**\n"
          COMMENT+=$(jq -r '.high[] | "- `\(.file):\(.line)` â€” \(.pattern)`"' <<< "$REGEX_JSON")
          COMMENT+=$'\n**AI findings:**\n'
          if [ "$AI_OUT" = "NO_RISK" ]; then COMMENT+="- None"; else COMMENT+="$AI_OUT"; fi
          echo "$COMMENT"

          # --- Post comment ---
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT"

          # --- Fail PR if any high severity ---
          HIGH_COUNT=$(jq -r '.high | length' <<< "$REGEX_JSON")
          AI_HIGH=$(jq -r 'try map(select(.severity=="HIGH")) | length // 0' <<< "$AI_OUT" 2>/dev/null || echo 0)
          if [ "$HIGH_COUNT" -gt 0 ] || [ "$AI_HIGH" -gt 0 ] && [ "$BLOCK_ON_HIGH" = "true" ]; then
            echo "::error ::Blocking PR due to high severity findings."
            exit 1
          fi
