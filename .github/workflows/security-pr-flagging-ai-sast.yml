# .github/workflows/security-pr-scan.yml
name: Security PR Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  BLOCK_ON_FINDINGS: "true"

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ripgrep jq

      - name: Get changed files
        id: files
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD > changed_files.txt
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          cat changed_files.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Regex security scan
        id: regexscan
        run: |
          set -uo pipefail
          jq -n '{high:[], low:[]}' > regex_results.json

          HIGH_PATTERNS=(
            '[A-Za-z0-9/+=]{40}'
            'AKIA[0-9A-Z]{16}|ASIA[0-9A-Z]{16}'
            '-----BEGIN (RSA|PRIVATE|EC|OPENSSH) PRIVATE KEY-----'
            "(password|passwd)[\"']?\s*[:=]\s*['\"].{3,}"
          )

          LOW_PATTERNS=(
            '\beval\(|\bexec\('
            'api[_-]?key|secret[_-]?key'
          )

          while IFS= read -r file; do
            [ -z "$file" ] && continue
            [ ! -f "$file" ] && continue
            case "$file" in
              *.png|*.jpg|*.jpeg|*.gif|*.pdf|*.zip|*.bin) continue ;;
            esac

            for pat in "${HIGH_PATTERNS[@]}"; do
              rg --no-filename -n --pcre2 "$pat" "$file" 2>/dev/null \
                | while IFS=: read -r line content; do
                    snippet=$(printf '%s' "$content" | sed 's/"/\\"/g' | sed 's/^[[:space:]]*//')
                    jq --arg f "$file" --arg l "$line" --arg m "$snippet" --arg p "$pat" \
                      '.high += [{"file":$f,"line":$l,"snippet":$m,"pattern":$p}]' regex_results.json \
                      > /tmp/rr.json && mv /tmp/rr.json regex_results.json || true
                done
            done

            for pat in "${LOW_PATTERNS[@]}"; do
              rg --no-filename -n --pcre2 "$pat" "$file" 2>/dev/null \
                | while IFS=: read -r line content; do
                    snippet=$(printf '%s' "$content" | sed 's/"/\\"/g' | sed 's/^[[:space:]]*//')
                    jq --arg f "$file" --arg l "$line" --arg m "$snippet" --arg p "$pat" \
                      '.low += [{"file":$f,"line":$l,"snippet":$m,"pattern":$p}]' regex_results.json \
                      > /tmp/rr.json && mv /tmp/rr.json regex_results.json || true
                done
            done
          done < changed_files.txt

          cat regex_results.json
          echo "REGEX_RESULTS<<EOF" >> $GITHUB_ENV
          cat regex_results.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const results = JSON.parse(process.env.REGEX_RESULTS || '{"high":[],"low":[]}');
            let body = '### Automated Security Scan Results\n';
            if(results.high.length === 0 && results.low.length === 0){
              body += '- No security issues found.';
            } else {
              if(results.high.length > 0){
                body += '#### High severity:\n';
                results.high.forEach(r => body += `- \`${r.file}:${r.line}\` — ${r.pattern}\n`);
              }
              if(results.low.length > 0){
                body += '#### Low/Info severity:\n';
                results.low.forEach(r => body += `- \`${r.file}:${r.line}\` — ${r.pattern}\n`);
              }
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Fail PR if high severity
        if: always()
        run: |
          HIGH_COUNT=$(jq -r '.high | length' regex_results.json)
          if [ "$HIGH_COUNT" -gt 0 ] && [ "${BLOCK_ON_FINDINGS}" = "true" ]; then
            echo "Blocking PR due to high severity findings."
            exit 1
          else
            echo "No blocking findings."
          fi
