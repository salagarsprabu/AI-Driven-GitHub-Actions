name: Ultra-Simplified Single-Step Security Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write
  models: read

env:
  BLOCK_ON_HIGH: "true"
  GH_MODEL: "gpt-4o-mini"
  MODEL_TEMPERATURE: "0"

jobs:
  pr-security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ripgrep curl

      - name: Regex + AI Security Scan
        shell: bash
        env:
          GH_MODEL: ${{ env.GH_MODEL }}
          MODEL_TEMPERATURE: ${{ env.MODEL_TEMPERATURE }}
          BLOCK_ON_HIGH: ${{ env.BLOCK_ON_HIGH }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -uo pipefail
          shopt -s nullglob

          # --- Get changed files and PR diff ---
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}...HEAD -U0)

          # --- Regex scan ---
          HIGH_PATTERNS=('AKIA[0-9A-Z]{16}|ASIA[0-9A-Z]{16}' '[A-Za-z0-9/+=]{40}' '-----BEGIN (RSA|PRIVATE|EC|OPENSSH) PRIVATE KEY-----' "(password|passwd)[\"']?\s*[:=]\s*['\"].{3,}")
          LOW_PATTERNS=('\beval\(|\bexec\(' 'api[_-]?key|secret[_-]?key')

          HIGH_FINDINGS=()
          LOW_FINDINGS=()

          for file in $CHANGED_FILES; do
            [ -f "$file" ] || continue
            case "$file" in *.png|*.jpg|*.jpeg|*.gif|*.pdf|*.zip|*.bin) continue;; esac

            for pat in "${HIGH_PATTERNS[@]}"; do
              matches=$(rg --no-filename -n --pcre2 "$pat" "$file" 2>/dev/null || true)
              while IFS=: read -r line content; do
                HIGH_FINDINGS+=("$file:$line — $pat")
              done <<< "$matches"
            done

            for pat in "${LOW_PATTERNS[@]}"; do
              matches=$(rg --no-filename -n --pcre2 "$pat" "$file" 2>/dev/null || true)
              while IFS=: read -r line content; do
                LOW_FINDINGS+=("$file:$line — $pat")
              done <<< "$matches"
            done
          done

          # --- AI scan using GitHub Models REST API ---
          SYSTEM_PROMPT='You are a strict security reviewer. Analyze the PR diff for risky patterns and output a short human-readable text summary of any HIGH/MEDIUM/LOW issues. If no risk, respond "NO_RISK".'
          AI_OUT=$(gh api \
            -H "X-GitHub-Api-Version: 2023-07-07" \
            -X POST "models/${GH_MODEL}/completions" \
            -f temperature="$MODEL_TEMPERATURE" \
            -f max_tokens=800 \
            -f messages[]="$(jq -nc --arg role system --arg content "$SYSTEM_PROMPT" '{role:$role,content:$content}')" \
            -f messages[]="$(jq -nc --arg role user --arg content "$DIFF" '{role:$role,content:$content}')" \
            --jq '.choices[0].message.content' 2>/dev/null || echo "NO_RISK")
          AI_OUT=${AI_OUT:-NO_RISK}

          # --- Aggregate Comment ---
          COMMENT="### Automated Security Scan Results\n\n**Regex High Severity:**\n"
          if [ ${#HIGH_FINDINGS[@]} -eq 0 ]; then
            COMMENT+="- None\n"
          else
            for f in "${HIGH_FINDINGS[@]}"; do COMMENT+="- \`$f\`\n"; done
          fi

          COMMENT+="\n**Regex Low Severity:**\n"
          if [ ${#LOW_FINDINGS[@]} -eq 0 ]; then
            COMMENT+="- None\n"
          else
            for f in "${LOW_FINDINGS[@]}"; do COMMENT+="- \`$f\`\n"; done
          fi

          COMMENT+="\n**AI Findings:**\n"
          if [[ "$AI_OUT" == "NO_RISK" ]]; then
            COMMENT+="- None\n"
          else
            COMMENT+="$AI_OUT\n"
          fi

          echo "$COMMENT"

          # --- Post comment ---
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT"

         
          # --- Block PR if high severity ---
          #if [ ${#HIGH_FINDINGS[@]} -gt 0 ] && [ "$BLOCK_ON_HIGH" = "true" ]; then
          #  echo "::error ::Blocking PR due to high severity regex findings."
          #  exit 1
          # fi
          if [ ${#HIGH_FINDINGS[@]} -gt 0 ]; then
            echo "::warning ::High severity regex findings detected. Please review."
          fi

          #if [[ "$AI_OUT" != "NO_RISK" && "$BLOCK_ON_HIGH" = "true" ]]; then
          #  echo "::error ::Blocking PR due to AI-detected security issues."
          #  exit 1
          # fi
          
          if [[ "$AI_OUT" != "NO_RISK" ]]; then
              echo "::warning ::AI-detected security issues. Please review."
          fi
